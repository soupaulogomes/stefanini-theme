{% liquid
  assign product_featured_image = product.featured_image | image_url

  assign loading = 'eager'
  assign fetchpriority = 'auto'
  if section.index == 1
    assign fetchpriority = 'high'
  elsif section.index > 2
    assign loading = 'lazy'
  endif
%}
{% style %}
  /* For Webkit-based browsers (Chrome, Safari and Opera) */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* For IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
{% endstyle %}
<div class="wrapper section relative {{ section.settings.background_color }}">
  <div
    x-data="
      {
        loading: false,
        loadingPage: false,
        gift: false,
        splide: null,
        thumbHeight: '{{ product_featured_image.height | default: '40rem' }}',
        variant: '{{ product.selected_or_first_available_variant.id }}',
        quantity: 1,
        currentVariant: {{ product.selected_or_first_available_variant | json | escape }},
        selectedOptions: {{ product.selected_or_first_available_variant.options | json | escape }},
        productVariants: {{ product.variants | json | escape }},
        featuredImage: '{{ product_featured_image }}',
        renderSplideNew() {
          const productImage = document.getElementById('product-info').querySelector('.product-image')
          const splide = new Splide(productImage, {
            type: 'loop',
            pagination: true,
            perPage: 1,
            lazyLoad: 'nearby',
            arrows: false,
            pauseOnHover: false,
            pauseOnFocus: false,
            breakpoints: {
              640: {
                height: 400,
              },
              768: {
                height: 600,
              },
              1024: {
                height: 400,
              },
              1280: {
                height: 600,
              }
            },
            video: {
              loop: true,
              mute: true,
              autoplay: true,
              hideControls: true
            },
            i18n: {
              prev: '{{ 'common.sr_only.previous' | t }}',
              next: '{{ 'common.sr_only.next' | t }}',
              first: '{{ 'common.aria_label.first_slide' | t }}',
              last: '{{ 'common.aria_label.last_slide' | t }}',
            }
          })

          const productThumbs = document.getElementById('product-info').querySelector('.product-thumbnail')

          const navigation = new Splide(productThumbs, {
            fixedHeight: '6rem',
            cover: true,
            direction: 'ttb',
            height: 800,
            lazyLoad: 'nearby',
            gap: '2rem',
            wheel: true,
            pagination: false,
            arrows: true,
            breakpoints: {
              640: {
                height: 400,
              },
              768: {
                height: 600,
              },
              1024: {
                height: 400,
              },
              1280: {
                height: 600,
              }
            },
            isNavigation: true,
            i18n: {
              prev: '{{ 'common.sr_only.previous' | t }}',
              next: '{{ 'common.sr_only.next' | t }}',
              first: '{{ 'common.aria_label.first_slide' | t }}',
              last: '{{ 'common.aria_label.last_slide' | t }}',
            }
          })

          function initPagination(pagination, index) {
            pagination.addEventListener('click', () => splide.go(index))
          }

          const paginations = document.getElementsByClassName('pagination-item-{{ section.id }}')
          let current
          for (let i = 0; i < paginations.length; i++) initPagination(paginations[i], i)
          splide.on('mounted move', () => {
            const pagination = paginations[splide.index]
            if (pagination) {
              if (current) current.classList.remove('active')
              pagination.classList.add('active')
              current = pagination
            }
          })

          splide.sync( navigation );
          splide.mount({ Video: window.SplideVideo });
          navigation.mount();
        },
        async updateProduct(productUrl, variantId){
          this.loadingPage = true
          if ('URLSearchParams' in window) {
            const searchParams = new URLSearchParams(window.location.search)
            searchParams.set('variant', `${variantId}`)
            window.location.href = `${productUrl}` + '?' + searchParams.toString()
          }
        },
        async updateVariant() {
          this.loadingPage = true

          $data.currentVariant = $data.productVariants.find((variant) => {
            return !variant.options.map((option, index) => $data.selectedOptions[index] === option).includes(false)
          })

          if ('URLSearchParams' in window) {
            const searchParams = new URLSearchParams(window.location.search)
            searchParams.set('variant', `${$data.currentVariant.id}`)
            const newRelativePathQuery = `{{ product.url }}` + '?' + searchParams.toString()
            history.replaceState({}, '', newRelativePathQuery)
          }

          await fetch(`{{ product.url }}?variant=${$data.currentVariant.id}&section_id={{ section.id }}`)
            .then((response) => response.text())
            .then((responseText) => {
              const oldHtmlElement = document.getElementById('product-info')
              const newHtmlString = new DOMParser().parseFromString(responseText, 'text/html').getElementById('product-info').outerHTML

              Alpine.morph(oldHtmlElement, newHtmlString)

              this.loadingPage = false
            })

            if($data.currentVariant.featured_image != null){
              this.featuredImage = $data.currentVariant.featured_image.src
            }

          this.renderSplideNew()
          $dispatch('variant-update')
        },
        handleAdd(type = 'add') {
          this.loading = true

          const items = [{ id: this.currentVariant.id, quantity: this.quantity, properties: {} }]

          if (this.gift) {
            items[0].properties['Obs'] = '{{ 'common.sending_as_a_gift_obs' | t }}'
          }

          $store.cart.addItems(items)
          .then(response => {
            this.loading = false

            {% if settings.cart_type != 'side' %}
              $dispatch('show-notification', { type: 'success', title: '{{ 'common.notification.cart' | t }}', description: '{{ 'common.notification.add_success' | t }}' })
            {% endif %}

            $dispatch('cart-change')

            $store.cart.fetchItems()

            if (type == 'buy') {
              window.location.href = '/checkout'
            }

            Log('Add to Cart:', response)
          })
        }
      }
    "
    x-init="updateVariant; window.location.search.includes('addToCart') && handleAdd()"
  >
    <div
      id="product-info"
      class="grid grid-cols-12 gap-4"
    >
      <div
        x-show="loadingPage"
        class="fixed inset-0 z-50 flex h-screen w-screen items-center justify-center bg-black/40 pt-0 text-white"
      >
        {% render 'loading-spinner', show_condition: 'loadingPage' %}
      </div>
      <div
        x-data="
          {
            images: [
              {% for image in product.images %}
                '{{ image | image_url }}',
              {% endfor %}
            ],
            updateImage(image) {
              featuredImage = image
            },
            hoverImage(image) {
              featuredImage = image
            }
          }
        "
        class="col-span-full flex flex-col gap-4 md:col-span-6"
      >
        {% for block in section.blocks %}
          {% case block.type %}
            {% when 'gallery' %}
              {% assign count = 0 %}
              {% assign variant_image_src = product.selected_or_first_available_variant.featured_image %}
              <div
                class="gallery col-span-full flex gap-4 md:col-span-6"
              >
                <div
                  class="gallery-thumbnails hidden w-24 flex-col md:flex"
                  x-ref="thumbnails"
                >
                  <div class="splide product-thumbnail">
                    <div class="splide__track">
                      <ul class="splide__list">
                        {% if product.media.size == 0 %}
                          {% render 'product-placeholder', image_class: 'gallery-image image object-cover' %}
                        {% else %}
                          {% if variant_image_src %}
                            <li class="splide__slide {{ block.settings.border_radius }} overflow-hidden">
                              {{
                                variant_image_src
                                | image_url: width: 300
                                | image_tag:
                                  fetchpriority: fetchpriority,
                                  loading: loading,
                                  class: 'gallery-image image object-cover'
                              }}
                            </li>
                          {% endif %}
                          {% for media in product.media %}
                            {% if media.media_type != 'image' or media.src != variant_image_src %}
                              <li class="splide__slide {{ block.settings.border_radius }} overflow-hidden">
                                {% liquid
                                  assign count = forloop.index0
                                  if media.media_type == 'image' and media.src == variant_image_src
                                    continue
                                  endif
                                %}
                                {% case media.media_type %}
                                  {% when 'external_video' %}
                                    {{ media | external_video_tag: class: 'gallery-video video' }}
                                  {% when 'video' %}
                                    {{
                                      media
                                      | video_tag:
                                        autoplay: true,
                                        muted: true,
                                        loop: true,
                                        controls: false,
                                        class: 'gallery-video video'
                                    }}
                                  {% when 'model' %}
                                    {{ media | model_viewer_tag: class: 'w-full gallery-3d 3d h-full' }}
                                  {% when 'image' %}
                                    {{
                                      media
                                      | image_url: width: 300
                                      | image_tag:
                                        fetchpriority: fetchpriority,
                                        loading: loading,
                                        class: 'gallery-image image object-cover'
                                    }}
                                {% endcase %}
                              </li>
                            {% endif %}
                          {% endfor %}
                        {% endif %}
                      </ul>
                    </div>
                    <div class="splide__arrows w-full text-primary">
                      <div class="absolute inset-x-0 -top-8 flex justify-center">
                        <button
                          class="splide__arrow button button-ghost splide__arrow--prev z-20 rotate-90 p-0 disabled:hidden"
                          type="button"
                        >
                          {% render 'chevron-icon', side: 'left' %}
                        </button>
                      </div>
                      <div class="absolute inset-x-0 -bottom-8 flex justify-center">
                        <button
                          class="splide__arrow button button-ghost splide__arrow--next z-20 rotate-90 p-0 disabled:hidden"
                          type="button"
                        >
                          {% render 'chevron-icon', side: 'right' %}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="w-full">
                  <div class="splide product-image relative block w-full" aria-label="Slide de produtos">
                    <div class="splide__track">
                      <ul class="splide__list">
                        {% if product.media.size == 0 %}
                          {% render 'product-placeholder',
                            image_class: 'w-full gallery-image bg-white image object-contain'
                          %}
                        {% else %}
                          {% if variant_image_src %}
                            <li class="splide__slide {{ block.settings.border_radius }} overflow-hidden">
                              {{
                                variant_image_src
                                | image_url: width: 960
                                | image_tag:
                                  fetchpriority: fetchpriority,
                                  loading: loading,
                                  class: 'w-full gallery-image bg-white image object-contain'
                              }}
                            </li>
                          {% endif %}
                          {% for media in product.media %}
                            {% if media.media_type != 'image' or media.src != variant_image_src %}
                              <li class="splide__slide {{ block.settings.border_radius }} overflow-hidden">
                                {% liquid
                                  assign count = forloop.index0
                                  if media.media_type == 'image' and media.src == variant_image_src
                                    continue
                                  endif
                                %}
                                {% case media.media_type %}
                                  {% when 'external_video' %}
                                    {{ media | external_video_tag: class: 'gallery-video w-full video h-full' }}
                                  {% when 'video' %}
                                    {{
                                      media
                                      | video_tag:
                                        autoplay: true,
                                        muted: true,
                                        loop: true,
                                        controls: false,
                                        class: 'gallery-video w-full video h-full'
                                    }}
                                  {% when 'model' %}
                                    {{ media | model_viewer_tag: class: 'w-full gallery-3d 3d h-full' }}
                                  {% when 'image' %}
                                    {{
                                      media
                                      | image_url: width: 960
                                      | image_tag:
                                        fetchpriority: fetchpriority,
                                        loading: loading,
                                        class: 'w-full bg-white gallery-image image object-contain'
                                    }}
                                {% endcase %}
                              </li>
                            {% endif %}
                          {% endfor %}
                        {% endif %}
                      </ul>
                      {% if count != 0 %}
                        <nav class="pagination pagination-dots absolute inset-x-0 bottom-10 flex justify-center md:hidden">
                          {% assign count = product.media.size %}
                          {% for block in (1..count) %}
                            <button class="pagination-item-{{ section.id }}">
                              <span class="sr-only">Ir para o slide {{ forloop.index }}</span>
                            </button>
                          {% endfor %}
                        </nav>
                      {% endif %}
                    </div>
                  </div>
                  {% if section.settings.stamp_below_image %}
                    {% render 'stamp-carousel', section: section %}
                  {% endif %}
                </div>
              </div>
          {% endcase %}
        {% endfor %}
      </div>
      <div
        class="col-span-full w-full md:col-start-8 md:col-end-12"
      >
        <div class="top-16 space-y-6">
          {% for block in section.blocks %}
            {% case block.type %}
              {% when '@app' %}
                {% render block %}
              {% when 'product_name' %}
                {% assign title_tag = block.settings.title_tag %}
                <{{ title_tag }} class="product-title font-bold {{ block.settings.title_size }} {{ block.settings.title_color }}">
                  {{ product.title }}
                </{{ title_tag }}>
              {% when 'product_description' %}
                <div class="product-description {{ block.settings.description_size }} {{ block.settings.description_color }}">
                  {{ product.description }}
                </div>
            {% endcase %}
          {% endfor %}
          <div>
            {% for block in section.blocks %}
              {% case block.type %}
                {% when 'tags' %}
                  {% if block.settings.tag_text != blank %}
                    <span class="tag border-current p-2 {{ section.settings.tags_color }} {{ section.settings.tags_width }} {{ block.settings.tags_style }}">
                      {{ block.settings.tag_text }}
                    </span>
                  {% endif %}
              {% endcase %}
            {% endfor %}
          </div>
          {% for block in section.blocks %}
            {% case block.type %}
              {% when 'shipping' %}
                <div
                  x-data='
                    {
                      shippingEnterprises: [],
                      state: "",
                      city: "",
                      error: "",
                      error_message: {
                        invalid_zip_code: "{{ 'sections.main_product.invalid_zip_code' | t }}"
                      },
                      maskCEP() {
                        const cep = document.getElementById("cep")
                        cep.addEventListener("input", (event) => {
                          let valor = event.target.value
                          valor = valor.replace(/\D/g, "")
                          valor = valor.replace(/^(\d{5})(\d)/, "$1-$2")
                          event.target.value = valor
                        })
                      },
                      async shippingCalculate(cep) {
                        window.localStorage.setItem("cep", cep)
                        cep = cep.replace(/-/g, "")
                        this.error = ""
                        const states = {
                          AC: "Acre",
                          AL: "Alagoas",
                          AP: "Amapá",
                          AM: "Amazonas",
                          BA: "Bahia",
                          CE: "Ceará",
                          DF: "Distrito Federal",
                          ES: "Espírito Santo",
                          GO: "Goiás",
                          MA: "Maranhão",
                          MT: "Mato Grosso",
                          MS: "Mato Grosso do Sul",
                          MG: "Minas Gerais",
                          PA: "Pará",
                          PB: "Paraíba",
                          PR: "Paraná",
                          PE: "Pernambuco",
                          PI: "Piauí",
                          RJ: "Rio de Janeiro",
                          RN: "Rio Grande do Norte",
                          RS: "Rio Grande do Sul",
                          RO: "Rondônia",
                          RR: "Roraima",
                          SC: "Santa Catarina",
                          SP: "São Paulo",
                          SE: "Sergipe",
                          TO: "Tocantins"
                        }

                        const product_id = "{{ product.selected_or_first_available_variant.id }}"

                        if (cep.length == 8) {
                          let currentCookie = this.getCookie()
                          const newCookie = this.updateCookie("fake_card_" + product_id)
                          await this.addToCart()
                          const { uf, localidade, cep: foo } = await this.getCepData(cep)
                          this.state = states[uf]
                          this.city = localidade
                          await this.cartGetRates("Brazil", states[uf], localidade, foo)
                          await this.removeFromCart()
                          this.updateCookie(currentCookie)
                        } else {
                          this.error = this.error_message.invalid_zip_code
                        }
                      },
                      async cartGetRates(country, state, city, zip) {
                        const shippingData = {
                          "shipping_address[country]": country,
                          "shipping_address[province]": state,
                          "shipping_address[address1]": zip,
                          "shipping_address[zip]": zip
                        }
                        await fetch("/cart/prepare_shipping_rates.json?" + new URLSearchParams(shippingData).toString(), {
                          method: "POST",
                          headers: {
                            "Content-Type": "application/json"
                          }
                        })
                        await fetch("/cart/async_shipping_rates.json?" + new URLSearchParams(shippingData).toString())
                        .then((response) => response.json())
                        .then((data) => this.shippingEnterprises = data)
                        .catch((error) => {
                          this.error = error
                          console.error("Error:", error)
                        })
                      },
                      async getCepData(cep) {
                        const response = await fetch("https://viacep.com.br/ws/" + cep + "/json/")
                        const data = await response.json()
                        return data
                      },
                      getCookie() {
                        let name = "cart="
                        let decodedCookie = decodeURIComponent(document.cookie)
                        let ca = decodedCookie.split(";")
                        for (let i = 0; i < ca.length; i++) {
                          let c = ca[i]
                          while (c.charAt(0) == " ") {
                            c = c.substring(1)
                          }
                          if (c.indexOf(name) == 0) {
                            return c.substring(name.length, c.length)
                          }
                        }
                        return ""
                      },
                      updateCookie(cvalue) {
                        const d = new Date()
                        d.setTime(d.getTime() + 14 * 86400000)
                        let expires = " expires=" + d.toUTCString()
                        const cookie = "cart=" + cvalue + expires + " path=/"
                        document.cookie = cookie
                        return cookie
                      },
                      async addToCart() {
                        let formData = {
                          "items": [{
                            "id": "{{ product.selected_or_first_available_variant.id }}",
                            "quantity": quantity,
                          }]
                        }
                        await fetch("/cart/add.js", {
                          method: "POST",
                          body: JSON.stringify(formData),
                          headers: {
                            "Content-Type": "application/json"
                          },
                        })
                        .then(response => {
                          return response.json()
                        })
                        .catch((error) => {
                          this.error = error
                          console.error("Error:", error)
                        })
                      },
                      async removeFromCart() {
                        let formData = {
                          "id": "{{ product.selected_or_first_available_variant.id }}",
                          "quantity": 0,
                        }
                        await fetch("/cart/change.js", {
                          method: "POST",
                          body: JSON.stringify(formData),
                          headers: {
                            "Content-Type": "application/json"
                          },
                        })
                        .then(response => {
                          return response.json()
                        })
                        .catch((error) => {
                          this.error = error
                          console.error("Error:", error)
                        })
                      },
                      pageReload() {
                        this.city = ""
                        this.shippingEnterprises = []
                      }
                    }
                  '
                  x-init="
                    $refs.cep.value = window.localStorage.getItem('cep')
                    $watch('selectedOptions', () => pageReload())
                    window.location.search.includes('addToCart') && addToCart()
                  "
                  class="shipping flex w-full flex-col gap-2"
                >
                  <div
                    class="mb-2 w-full rounded bg-red-400 p-2 px-4 text-white"
                    x-show="error != ''"
                    x-text="'{{ 'common.status.error' | t }}'"
                  ></div>
                  <span class="text {{ section.settings.text_size }} {{ section.settings.text_color }} font-bold">
                    {{- 'sections.main_product.shipping' | t -}}
                  </span>
                  <div class="flex w-full flex-col gap-2 md:flex-row">
                    <input
                      id="cep"
                      name="cep"
                      type="text"
                      maxlength="9"
                      @keypress="maskCEP"
                      x-ref="cep"
                      class="input w-full opacity-100 hover:opacity-75"
                    >
                    <button
                      @click="shippingCalculate($refs.cep.value)"
                      class="{{ block.settings.shipping_button_style }} {{ section.settings.button_color }} w-full whitespace-nowrap md:w-fit"
                    >
                      {{ 'sections.main_product.shipping' | t }}
                    </button>
                  </div>
                  <div class="mt-2" x-show="city != '' && error == ''">
                    <div class="mb-4 flex flex-row items-center gap-1">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        class="h-6 w-6"
                      >
                        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 18.75a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 01-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 00-3.213-9.193 2.056 2.056 0 00-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 00-10.026 0 1.106 1.106 0 00-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12" />
                      </svg>
                      <span x-text="'{{ 'sections.main_product.delivery_options' | t }}' + city + ' - ' + state"></span>
                    </div>
                    <hr class="mb-4 border">
                    <template x-for="enterprise in shippingEnterprises.shipping_rates">
                      <div class="mb-6 flex w-full flex-row place-content-between">
                        <div class="flex flex-col">
                          <span class="text-lg font-bold" x-text="enterprise.name"></span>
                          <span
                            x-show="enterprise.delivery_days.length != 0"
                            class="text-body-base"
                            x-text="'1 a ' + (enterprise.delivery_days[1] + 1) + '{{ 'sections.main_product.working_days' | t }}'"
                          ></span>
                        </div>
                        <span
                          class="text-body-base font-bold"
                          x-text="'{{ 'sections.main_product.money' | t }}' + enterprise.price.replace('.', ',')"
                        ></span>
                      </div>
                    </template>
                  </div>
                </div>
              {% when 'price' %}
                {% assign installments = settings.installments_number %}
                {% assign product_variant = product.selected_or_first_available_variant %}
                <div class="space-y-1">
                  {% if block.settings.show_discount == 'true'
                    and product_variant.compare_at_price > product_variant.price
                  %}
                    <span class="compare-at-price text-gray-400 line-through">
                      {{ product_variant.compare_at_price | money }}
                    </span>
                  {% endif %}
                  <div class="flex items-center gap-4">
                    {% assign title_tag = block.settings.title_tag %}
                    <{{ title_tag }} class="price font-serif font-bold {{ block.settings.price_size }} {{ block.settings.price_color }}">
                      {{ product_variant.price | money }}
                    </{{ title_tag }}>
                    {% if block.settings.show_discount == 'true'
                      and product_variant.compare_at_price > product_variant.price
                    %}
                      <span class="tag border-current p-2 {{ block.settings.discount_size }} {{ block.settings.discount_text_color }} {{ block.settings.discount_color }}">
                        {{
                          product_variant.compare_at_price
                          | minus: product_variant.price
                          | times: 100
                          | divided_by: product_variant.compare_at_price
                          | round
                        }}
                        {{ 'sections.main_product.off' | t -}}
                      </span>
                    {% endif %}
                  </div>
                  {% if block.settings.show_installment == 'true' and installments > 1 %}
                    {% liquid
                      assign price = product.selected_or_first_available_variant.price | default: 0

                      assign installments_max = price | divided_by: settings.installments_min_price | divided_by: 100 | round: 2 | at_most: settings.installments_number
                      assign installment_fees = price | times: settings.installments_percentage_fees | divided_by: 100
                      assign installment_price = price | plus: installment_fees | divided_by: installments_max
                    %}
                    {% assign value = installment_price | money %}
                    <p class="installment">
                      {{ 'sections.main_product.installments_value' | t: installments: installments_max, value: value }}
                    </p>
                  {% endif %}
                </div>
              {% when 'variant_selector' %}
                <div
                  x-init="$watch('selectedOptions', () => updateVariant())"
                  class="variant-selector flex w-full flex-col gap-4"
                >
                  {% if settings.product_type == 'metaobject' and product.metafields.luca.product_group != blank %}
                    <div class="flex flex-col gap-2">
                      {% assign meta = product.metafields.luca.product_group.value %}
                      <span class="text font-semibold {{ section.settings.selector_title_color }} {{ section.settings.selector_title_size }}">
                        {{ meta.name }}
                      </span>
                      <div class="flex items-center gap-2">
                        {% for prod in meta.products.value %}
                          {% assign color = 'bg-colors-' | append: prod.metafields.luca.color.value.name | handle %}
                          <button
                            aria-label="{{ 'common.aria_label.product_image' | t }}"
                            @click="updateProduct('{{ prod.url }}', '{{ prod.selected_or_first_available_variant.id }}')"
                            class="selector h-10 w-10 cursor-pointer overflow-hidden {{ color }} border {% if prod.url == product.url %}border-2 {{ section.settings.variant_color | replace: 'button', 'border' }}{% endif %}"
                          >
                            {% if prod.metafields.luca.color.value == blank %}
                              {{-
                                prod.featured_image
                                | image_url: width: 100
                                | image_tag:
                                  loading: loading,
                                  fetchpriority: fetchpriority,
                                  class: 'selector-image h-10 w-10 object-cover'
                              -}}
                            {% endif %}
                          </button>
                        {% endfor %}
                      </div>
                    </div>
                  {% endif %}
                  {%- unless product.has_only_default_variant -%}
                    {%- for option in product.options_with_values -%}
                      {% assign index = forloop.index0 %}
                      <fieldset
                        class="flex flex-col gap-2"
                        id="ProductSelect-option-{{ forloop.index0 }}"
                        name="{{ option.name | handleize }}"
                      >
                        <span class="text {{ section.settings.variant_title_size }} {{ section.settings.variant_title_color }} font-bold">
                          {{ option.name | escape }}
                        </span>
                        <div class="flex flex-wrap gap-2">
                          {% if option.values.size <= 3 %}
                            {%- for value in option.values -%}
                              {% liquid
                                assign option_variants = product.variants
                                for option_index in (1..index)
                                  assign option_index0 = option_index | minus: 1
                                  assign option_where = 'option' | append: option_index
                                  assign option_variants = option_variants | where: option_where, product.selected_variant.options[option_index0]
                                endfor
                                assign index1 = index | plus: 1
                                assign option_where = 'option' | append: index1
                                assign available_option_variants_size = option_variants | where: option_where, value | where: 'available' | size
                              %}
                              <input
                                type="radio"
                                {% if option.selected_value == value %}
                                  checked="checked"
                                {% endif %}
                                {% if available_option_variants_size <= 0 %}
                                  disabled="disabled"
                                {% endif %}
                                value="{{ value | escape }}"
                                data-index="option{{ forloop.index }}"
                                name="{{ option.name | handleize }}"
                                id="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}"
                                class="hidden"
                                x-model="selectedOptions[{{ index }}]"
                              >
                              <label
                                class="selector button {{ section.settings.variant_color }} {{ section.settings.variant_width }} {% if available_option_variants_size <= 0 %}cursor-default border-neutral-400 bg-neutral-100 text-neutral-400{% elsif option.selected_value == value %} text-white{% else %}button-outline cursor-pointer border-black text-black{% endif %}"
                                for="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}"
                              >
                                {{ value | escape }}
                              </label>
                            {%- endfor -%}
                          {% else %}
                            <select
                              x-model="selectedOptions[{{ index }}]"
                              class="selector text-black {{ section.settings.variant_width }}"
                            >
                              {%- for value in option.values -%}
                                {% liquid
                                  assign option_variants = product.variants
                                  for option_index in (1..index)
                                    assign option_index0 = option_index | minus: 1
                                    assign option_where = 'option' | append: option_index
                                    assign option_variants = option_variants | where: option_where, product.selected_variant.options[option_index0]
                                  endfor
                                  assign index1 = index | plus: 1
                                  assign option_where = 'option' | append: index1
                                  assign available_option_variants_size = option_variants | where: option_where, value | where: 'available' | size
                                %}
                                <option
                                  {% if option.selected_value == value %}
                                    selected="selected"
                                  {% endif %}
                                  {% if available_option_variants_size <= 0 %}
                                    disabled="disabled"
                                  {% endif %}
                                  class="disabled:cursor-default disabled:bg-neutral-100 disabled:text-neutral-400"
                                  value="{{ value | escape }}"
                                  name="{{ option.name | handleize }}"
                                >
                                  {{ value | escape }}
                                </option>
                              {% endfor %}
                            </select>
                          {% endif %}
                        </div>
                      </fieldset>
                    {%- endfor -%}
                  {%- endunless -%}
                </div>
              {% when 'quantity' %}
                {% if section.settings.quantity_position == 'default' %}
                  <div class="quantity flex flex-col gap-2">
                    <label
                      for="quantity"
                      class="{{ section.settings.text_size }} {{ section.settings.text_color }} font-bold"
                    >
                      {{- 'sections.main_product.quantity' | t -}}
                    </label>
                    <div
                      class="input inline-flex w-fit items-center justify-between border-black"
                      role="group"
                    >
                      <button
                        aria-label="{{ 'common.aria_label.decrease_quantity' | t }}"
                        type="button"
                        @click="--quantity"
                        x-bind:disabled="quantity <= 1"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke-width="1.5"
                          stroke="currentColor"
                          class="icon h-6 w-6"
                        >
                          <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 12h-15" />
                        </svg>
                      </button>
                      <input
                        id="quantity"
                        type="number"
                        min="0"
                        max="9999"
                        size="4"
                        name="quantity"
                        x-model="quantity"
                        :disabled="loading"
                        placeholder="{{ 'common.placeholder.quantity' }}"
                        @change="
                          if (quantity > parseInt($el.max)) quantity=$el.max
                          if (quantity < parseInt($el.min)) quantity=$el.min
                        "
                        class="w-full border-none p-0 text-center text-body-base text-black [appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none"
                      >
                      <button
                        aria-label="{{ 'common.aria_label.increase_quantity' | t }}"
                        type="button"
                        @click="++quantity"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke-width="1.5"
                          stroke="currentColor"
                          class="icon h-6 w-6"
                        >
                          <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                        </svg>
                      </button>
                    </div>
                  </div>
                {% endif %}
              {% when 'button' %}
                <div
                  class="flex flex-row gap-4"
                >
                  {% if section.settings.quantity_position == 'with_button' %}
                    <div class="quantity flex w-64 flex-col gap-2">
                      <div
                        class="input inline-flex h-full w-full items-center justify-between border-black"
                        role="group"
                      >
                        <button
                          aria-label="{{ 'common.aria_label.decrease_quantity' | t }}"
                          type="button"
                          @click="--quantity"
                          x-bind:disabled="quantity <= 1"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="icon h-6 w-6"
                          >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 12h-15" />
                          </svg>
                        </button>
                        <input
                          id="quantity"
                          type="number"
                          min="0"
                          max="9999"
                          size="4"
                          name="quantity"
                          x-model="quantity"
                          :disabled="loading"
                          placeholder="{{ 'common.placeholder.quantity' }}"
                          @change="
                            if (quantity > parseInt($el.max)) quantity=$el.max
                            if (quantity < parseInt($el.min)) quantity=$el.min
                          "
                          class="w-full border-none p-0 text-center text-body-base text-black [appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none"
                        >
                        <button
                          aria-label="{{ 'common.aria_label.increase_quantity' | t }}"
                          type="button"
                          @click="++quantity"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            class="icon h-6 w-6"
                          >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  {% endif %}
                  {% if block.settings.button_function == 'add_to_cart' %}
                    <button
                      @click="handleAdd()"
                      {% if product.selected_or_first_available_variant.available == false %}
                        disabled
                      {% else %}
                        :disabled="loading"
                      {% endif %}
                      :class="{ 'disabled:border-gray-400 disabled:bg-gray-300 disabled:text-gray-400': !loading }"
                      class="{{ block.settings.button_style }} {{ block.settings.button_width }} {{ block.settings.button_color }} w-full"
                    >
                      {% render 'loading-spinner', show_condition: 'loading' %}
                      <div x-show="!loading">
                        {{ block.settings.button_text }}
                        <span class="sr-only">{{ product.title }}</span>
                      </div>
                    </button>
                  {% else %}
                    <button
                      @click="handleAdd('buy')"
                      {% if product.selected_or_first_available_variant.available == false %}
                        disabled
                      {% else %}
                        :disabled="loading"
                      {% endif %}
                      :class="{ 'disabled:border-gray-400 disabled:bg-gray-300 disabled:text-gray-400': !loading }"
                      class="{{ block.settings.button_style }} {{ block.settings.button_width }} {{ block.settings.button_color }} w-full"
                    >
                      {% render 'loading-spinner', show_condition: 'loading' %}
                      <div x-show="!loading">
                        {{ block.settings.button_text }}
                        <span class="sr-only">{{ product.title }}</span>
                      </div>
                    </button>
                  {% endif %}
                </div>
              {% when 'sending_as_a_gift' %}
                {% render 'sending-as-a-gift', block: block %}
            {% endcase %}
          {% endfor %}

          {% unless section.settings.stamp_below_image %}
            {% render 'stamp-carousel', section: section %}
          {% endunless %}

          <div class="flex flex-col items-center justify-center gap-2">
            {% for block in section.blocks %}
              {% case block.type %}
                {% when 'cashback' %}
                  {% liquid
                    assign price = product.selected_or_first_available_variant.price | default: 0
                    assign cashback = price | times: block.settings.percentage | divided_by: 100
                  %}
                  <div
                    x-data="
                      {
                        cashback: '{{ cashback }}',
                        value: '',
                        text: '{{ block.settings.text }}',
                        newText: '',
                        updateText(){
                          this.value = this.cashback * quantity / 100
                          this.newText = this.text.replace('[value]', '{{ shop.money_format.symbol }}' + this.value)
                        }
                      }
                    "
                    x-init="$watch('quantity', () => updateText()); updateText()"
                    class="cashback flex items-center justify-center gap-2 text-center"
                  >
                    {% if block.settings.image != blank %}
                      {{
                        block.settings.image
                        | image_url: width: 100
                        | image_tag:
                          fetchpriority: fetchpriority,
                          loading: loading,
                          class: 'cashback-icon icon h-6 w-auto'
                      }}
                    {% endif %}
                    <div class="cashback-text text" x-html="newText"></div>
                  </div>
                {% when 'observation' %}
                  <div class="flex items-center justify-center gap-2 text-center">
                    {% if block.settings.image != blank %}
                      {{
                        block.settings.image
                        | image_url: width: 100
                        | image_tag:
                          fetchpriority: fetchpriority,
                          loading: loading,
                          class: 'observation-icon icon h-6 w-auto'
                      }}
                    {% endif %}
                    <span class="observation-text text">{{ block.settings.observation_text }}</span>
                  </div>
              {% endcase %}
            {% endfor %}
          </div>
          <div>
            {% for block in section.blocks %}
              {% case block.type %}
                {% when 'accordion' %}
                  {% if block.settings.accordion_text != blank or block.settings.image != blank %}
                    <div class="flex flex-col">
                      <details class="accordion">
                        <summary class="accordion-action {{ section.settings.accordion_title_size }} {{ section.settings.accordion_title_color }}">
                          {{ block.settings.accordion_title }}
                          <svg
                            class="{{ section.settings.accordion_icon_color }}"
                            width="20"
                            height="20"
                            viewBox="0 0 20 20"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M5.23017 7.20938C5.52875 6.92228 6.00353 6.93159 6.29063 7.23017L10 11.1679L13.7094 7.23017C13.9965 6.93159 14.4713 6.92228 14.7698 7.20938C15.0684 7.49647 15.0777 7.97125 14.7906 8.26983L10.5406 12.7698C10.3992 12.9169 10.204 13 10 13C9.79599 13 9.60078 12.9169 9.45938 12.7698L5.20938 8.26983C4.92228 7.97125 4.93159 7.49647 5.23017 7.20938Z" fill="currentColor"/>
                          </svg>
                        </summary>
                        <div class="accordion-content prose {{ section.settings.accordion_text_size }} {{ section.settings.accordion_text_color }}">
                          {{ block.settings.accordion_text }}
                          {% if block.settings.image != blank %}
                            {{
                              block.settings.image
                              | image_url: width: 600
                              | image_tag: fetchpriority: fetchpriority, loading: loading, class: 'image w-full'
                            }}
                          {% endif %}
                        </div>
                      </details>
                    </div>
                  {% endif %}
              {% endcase %}
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

{%- liquid
  if product.selected_or_first_available_variant.featured_media
    assign seo_media = product.selected_or_first_available_variant.featured_media
  else
    assign seo_media = product.featured_media
  endif
-%}

<script type="application/ld+json">
  {
    "@context": "http://schema.org/",
    "@type": "Product",
    "name": {{ product.title | json }},
    "url": {{ request.origin | append: product.url | json }},
    {% if seo_media -%}
      "image": [
        {{ seo_media | image_url: width: 1920 | prepend: "https:" | json }}
      ],
    {%- endif %}
    "description": {{ product.description | strip_html | json }},
    {% if product.selected_or_first_available_variant.sku != blank -%}
      "sku": {{ product.selected_or_first_available_variant.sku | json }},
    {%- endif %}
    "brand": {
      "@type": "Brand",
      "name": {{ product.vendor | json }}
    },
    "offers": [
      {%- for variant in product.variants -%}
        {
          "@type" : "Offer",
          {%- if variant.sku != blank -%}
            "sku": {{ variant.sku | json }},
          {%- endif -%}
          {%- if variant.barcode.size == 12 -%}
            "gtin12": {{ variant.barcode }},
          {%- endif -%}
          {%- if variant.barcode.size == 13 -%}
            "gtin13": {{ variant.barcode }},
          {%- endif -%}
          {%- if variant.barcode.size == 14 -%}
            "gtin14": {{ variant.barcode }},
          {%- endif -%}
          "availability" : "http://schema.org/{% if variant.available %}InStock{% else %}OutOfStock{% endif %}",
          "price" : {{ variant.price | divided_by: 100.00 | json }},
          "priceCurrency" : {{ cart.currency.iso_code | json }},
          "url" : {{ request.origin | append: variant.url | json }}
        }{% unless forloop.last %},{% endunless %}
      {%- endfor -%}
    ]
  }
</script>

{% schema %}
{
  "tag": "section",
  "name": "t:sections.main_product_detail_classic.name",
  "class": "main-product-detail-classic",
  "presets": [
    {
      "name": "t:sections.main_product_detail_classic.name",
      "blocks": [
        {
          "type": "gallery"
        },
        {
          "type": "product_name"
        },
        {
          "type": "product_description"
        },
        {
          "type": "tags"
        },
        {
          "type": "tags"
        },
        {
          "type": "price"
        },
        {
          "type": "variant_selector"
        },
        {
          "type": "quantity"
        },
        {
          "type": "button"
        },
        {
          "type": "cashback"
        },
        {
          "type": "observation"
        },
        {
          "type": "accordion"
        },
        {
          "type": "accordion"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "header",
      "content": "t:common.headers.variants"
    },
    {
      "type": "select",
      "id": "variant_title_color",
      "label": "t:common.labels.title.color",
      "options": [
        {
          "value": "text-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "text-neutral-600",
          "label": "t:common.colors.neutral"
        },
        {
          "value": "text-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "text-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "text-accent",
          "label": "t:common.colors.accent"
        },
        {
          "value": "text-secondary",
          "label": "t:common.colors.secondary"
        },
        {
          "value": "text-tertiary",
          "label": "t:common.colors.tertiary"
        }
      ],
      "default": "text-black"
    },
    {
      "type": "select",
      "id": "variant_title_size",
      "label": "t:common.labels.title.size",
      "options": [
        {
          "value": "text-body-lg",
          "label": "t:common.sizes.large"
        },
        {
          "value": "text-body-base",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "text-body-sm",
          "label": "t:common.sizes.small"
        }
      ],
      "default": "text-body-base"
    },
    {
      "type": "select",
      "id": "variant_color",
      "label": "t:common.labels.tags.color",
      "options": [
        {
          "value": "button-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "button-accent",
          "label": "t:common.colors.accent"
        },
        {
          "value": "button-secondary",
          "label": "t:common.colors.secondary"
        },
        {
          "value": "button-tertiary",
          "label": "t:common.colors.tertiary"
        },
        {
          "value": "button-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "button-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "button-neutral",
          "label": "t:common.colors.neutral"
        }
      ],
      "default": "button-primary"
    },
    {
      "type": "radio",
      "id": "variant_width",
      "label": "t:common.labels.tags.size",
      "options": [
        {
          "value": "py-2",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "py-1",
          "label": "t:common.sizes.small"
        }
      ],
      "default": "py-2"
    },
    {
      "type": "header",
      "content": "t:common.headers.quantity"
    },
    {
      "type": "radio",
      "id": "quantity_position",
      "label": "t:sections.main_product_detail_classic.settings.select_quantity_position",
      "options": [
        {
          "value": "default",
          "label": "t:common.labels.default.label"
        },
        {
          "value": "with_button",
          "label": "t:common.labels.button.with_button"
        }
      ],
      "default": "default"
    },
    {
      "type": "header",
      "content": "t:common.headers.accordion_title"
    },
    {
      "type": "select",
      "id": "accordion_title_color",
      "label": "t:common.labels.title.color",
      "options": [
        {
          "value": "text-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "text-neutral-600",
          "label": "t:common.colors.neutral"
        },
        {
          "value": "text-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "text-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "text-accent",
          "label": "t:common.colors.accent"
        }
      ],
      "default": "text-black"
    },
    {
      "type": "select",
      "id": "accordion_title_size",
      "label": "t:common.labels.title.size",
      "options": [
        {
          "value": "text-h6",
          "label": "t:common.sizes.large"
        },
        {
          "value": "text-body-lg",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "text-body-base",
          "label": "t:common.sizes.small"
        }
      ],
      "default": "text-body-base"
    },
    {
      "type": "header",
      "content": "t:common.headers.accordion_text"
    },
    {
      "type": "select",
      "id": "accordion_text_color",
      "label": "t:common.labels.text.color",
      "options": [
        {
          "value": "text-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "text-neutral-600",
          "label": "t:common.colors.neutral"
        },
        {
          "value": "text-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "text-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "text-accent",
          "label": "t:common.colors.accent"
        }
      ],
      "default": "text-neutral-600"
    },
    {
      "type": "select",
      "id": "accordion_text_size",
      "label": "t:common.labels.text.size",
      "options": [
        {
          "value": "text-body-lg",
          "label": "t:common.sizes.large"
        },
        {
          "value": "text-body-base",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "text-body-sm",
          "label": "t:common.sizes.small"
        }
      ],
      "default": "text-body-base"
    },
    {
      "type": "header",
      "content": "t:common.headers.accordion_icon"
    },
    {
      "type": "select",
      "id": "accordion_icon_color",
      "label": "t:common.labels.icon.color",
      "options": [
        {
          "value": "text-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "text-accent",
          "label": "t:common.colors.accent"
        },
        {
          "value": "text-secondary",
          "label": "t:common.colors.secondary"
        },
        {
          "value": "text-tertiary",
          "label": "t:common.colors.tertiary"
        },
        {
          "value": "text-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "text-white",
          "label": "t:common.colors.white"
        }
      ],
      "default": "text-primary"
    },
    {
      "type": "header",
      "content": "t:common.headers.tags"
    },
    {
      "type": "select",
      "id": "tags_color",
      "label": "t:common.labels.tags.color",
      "options": [
        {
          "value": "button-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "button-accent",
          "label": "t:common.colors.accent"
        },
        {
          "value": "button-secondary",
          "label": "t:common.colors.secondary"
        },
        {
          "value": "button-tertiary",
          "label": "t:common.colors.tertiary"
        },
        {
          "value": "button-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "button-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "button-neutral",
          "label": "t:common.colors.neutral"
        }
      ],
      "default": "button-accent"
    },
    {
      "type": "radio",
      "id": "tags_width",
      "label": "t:common.labels.tags.size",
      "options": [
        {
          "value": "py-2",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "py-1",
          "label": "t:common.sizes.small"
        }
      ],
      "default": "py-2"
    },
    {
      "type": "header",
      "content": "t:common.headers.background"
    },
    {
      "type": "select",
      "id": "background_color",
      "label": "t:common.labels.background.color",
      "options": [
        {
          "value": "bg-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "bg-neutral-100",
          "label": "t:common.colors.neutral"
        },
        {
          "value": "bg-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "bg-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "bg-accent",
          "label": "t:common.colors.accent"
        },
        {
          "value": "bg-secondary",
          "label": "t:common.colors.secondary"
        },
        {
          "value": "bg-tertiary",
          "label": "t:common.colors.tertiary"
        }
      ],
      "default": "bg-white"
    },
    {
      "type": "header",
      "content": "t:common.headers.stamps"
    },
    {
      "id": "stamp_carousel",
      "type": "checkbox",
      "label": "t:common.labels.stamp.show_in_carousel_format",
      "default": true
    },
    {
      "id": "stamp_below_image",
      "type": "checkbox",
      "label": "t:common.labels.stamp.stamp_below_image",
      "default": false
    },
    {
      "type": "header",
      "content": "t:common.headers.title"
    },
    {
      "type": "select",
      "id": "stamp_title_color",
      "label": "t:common.labels.title.color",
      "options": [
        {
          "value": "text-black",
          "label": "t:common.colors.black"
        },
        {
          "value": "text-neutral-600",
          "label": "t:common.colors.neutral"
        },
        {
          "value": "text-white",
          "label": "t:common.colors.white"
        },
        {
          "value": "text-primary",
          "label": "t:common.colors.primary"
        },
        {
          "value": "text-accent",
          "label": "t:common.colors.accent"
        },
        {
          "value": "text-secondary",
          "label": "t:common.colors.secondary"
        },
        {
          "value": "text-tertiary",
          "label": "t:common.colors.tertiary"
        }
      ],
      "default": "text-black"
    },
    {
      "type": "select",
      "id": "stamp_title_size",
      "label": "t:common.labels.title.size",
      "options": [
        {
          "value": "text-h3",
          "label": "t:common.sizes.extra_large"
        },
        {
          "value": "text-h5",
          "label": "t:common.sizes.large"
        },
        {
          "value": "text-body-lg",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "text-body-base",
          "label": "t:common.sizes.small"
        },
        {
          "value": "text-body-sm",
          "label": "t:common.sizes.tiny"
        }
      ],
      "default": "text-body-sm"
    },
    {
      "type": "header",
      "content": "t:common.headers.image"
    },
    {
      "type": "radio",
      "id": "stamp_size",
      "label": "t:common.labels.tags.size",
      "options": [
        {
          "value": "6rem",
          "label": "t:common.sizes.large"
        },
        {
          "value": "5rem",
          "label": "t:common.sizes.medium"
        },
        {
          "value": "4rem",
          "label": "t:common.sizes.small"
        }
      ],
      "default": "4rem"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "shipping",
      "name": "t:sections.main_product.blocks.shipping.name",
      "limit": 1,
      "settings": [
        {
          "id": "shipping_button_style",
          "type": "select",
          "label": "t:common.labels.button.style",
          "options": [
            {
              "value": "button",
              "label": "t:common.colors.primary"
            },
            {
              "value": "button button-outline",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "button button-ghost",
              "label": "t:common.colors.tertiary"
            }
          ],
          "default": "button"
        }
      ]
    },
    {
      "type": "sending_as_a_gift",
      "name": "t:common.headers.sending_as_a_gift",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "text_color",
          "label": "t:common.labels.text.color",
          "options": [
            {
              "value": "text-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "text-neutral-600",
              "label": "t:common.colors.neutral"
            },
            {
              "value": "text-white",
              "label": "t:common.colors.white"
            },
            {
              "value": "text-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "text-accent",
              "label": "t:common.colors.accent"
            },
            {
              "value": "text-secondary",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "text-tertiary",
              "label": "t:common.colors.tertiary"
            }
          ],
          "default": "text-black"
        },
        {
          "type": "select",
          "id": "text_size",
          "label": "t:common.labels.text.size",
          "options": [
            {
              "value": "text-h3",
              "label": "t:common.sizes.extra_large"
            },
            {
              "value": "text-h5",
              "label": "t:common.sizes.large"
            },
            {
              "value": "text-body-lg",
              "label": "t:common.sizes.medium"
            },
            {
              "value": "text-body-base",
              "label": "t:common.sizes.small"
            },
            {
              "value": "text-body-sm",
              "label": "t:common.sizes.tiny"
            }
          ],
          "default": "text-body-base"
        },
        {
          "type": "text",
          "id": "text",
          "label": "t:common.labels.text.write"
        }
      ]
    },
    {
      "type": "gallery",
      "name": "t:common.blocks.gallery",
      "limit": 1,
      "settings": []
    },
    {
      "type": "cashback",
      "name": "t:common.blocks.cashback",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:common.labels.image.select"
        },
        {
          "type": "header",
          "content": "t:common.headers.text",
          "info": "t:sections.main_product_detail_classic.blocks.cashback.info"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "t:common.labels.text.write",
          "default": "<p>Observação cashback</p>"
        },
        {
          "type": "header",
          "content": "t:sections.main_product_detail_classic.blocks.cashback.calc_value"
        },
        {
          "type": "number",
          "id": "percentage",
          "label": "t:sections.main_product_detail_classic.blocks.cashback.percentage",
          "default": 10
        }
      ]
    },
    {
      "type": "product_name",
      "name": "t:common.headers.product_name",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "title_tag",
          "label": "t:common.labels.title.tag",
          "options": [
            {
              "value": "h1",
              "label": "t:common.headings.h1"
            },
            {
              "value": "h2",
              "label": "t:common.headings.h2"
            },
            {
              "value": "h3",
              "label": "t:common.headings.h3"
            },
            {
              "value": "h4",
              "label": "t:common.headings.h4"
            },
            {
              "value": "h5",
              "label": "t:common.headings.h5"
            },
            {
              "value": "h6",
              "label": "t:common.headings.h6"
            }
          ],
          "default": "h1"
        },
        {
          "type": "select",
          "id": "title_color",
          "label": "t:common.labels.title.color",
          "options": [
            {
              "value": "text-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "text-neutral-600",
              "label": "t:common.colors.neutral"
            },
            {
              "value": "text-white",
              "label": "t:common.colors.white"
            },
            {
              "value": "text-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "text-accent",
              "label": "t:common.colors.accent"
            },
            {
              "value": "text-secondary",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "text-tertiary",
              "label": "t:common.colors.tertiary"
            }
          ],
          "default": "text-black"
        },
        {
          "type": "select",
          "id": "title_size",
          "label": "t:common.labels.title.size",
          "options": [
            {
              "value": "text-h2 md:text-h1",
              "label": "t:common.sizes.extra_large"
            },
            {
              "value": "text-h3 md:text-h2",
              "label": "t:common.sizes.large"
            },
            {
              "value": "text-h4 md:text-h3",
              "label": "t:common.sizes.medium"
            },
            {
              "value": "text-h5 md:text-h4",
              "label": "t:common.sizes.small"
            },
            {
              "value": "text-h6 md:text-h5",
              "label": "t:common.sizes.tiny"
            }
          ],
          "default": "text-h5 md:text-h4"
        }
      ]
    },
    {
      "type": "product_description",
      "name": "t:common.headers.product_description",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "description_color",
          "label": "t:common.labels.description.color",
          "options": [
            {
              "value": "text-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "text-neutral-600",
              "label": "t:common.colors.neutral"
            },
            {
              "value": "text-white",
              "label": "t:common.colors.white"
            },
            {
              "value": "text-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "text-accent",
              "label": "t:common.colors.accent"
            },
            {
              "value": "text-secondary",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "text-tertiary",
              "label": "t:common.colors.tertiary"
            }
          ],
          "default": "text-black"
        },
        {
          "type": "select",
          "id": "description_size",
          "label": "t:common.labels.description.size",
          "options": [
            {
              "value": "text-body-lg",
              "label": "t:common.sizes.large"
            },
            {
              "value": "text-body-base",
              "label": "t:common.sizes.medium"
            },
            {
              "value": "text-body-sm",
              "label": "t:common.sizes.small"
            }
          ],
          "default": "text-body-sm"
        }
      ]
    },
    {
      "type": "price",
      "name": "t:common.headers.price",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "title_tag",
          "label": "t:common.labels.title.tag",
          "options": [
            {
              "value": "h1",
              "label": "t:common.headings.h1"
            },
            {
              "value": "h2",
              "label": "t:common.headings.h2"
            },
            {
              "value": "h3",
              "label": "t:common.headings.h3"
            },
            {
              "value": "h4",
              "label": "t:common.headings.h4"
            },
            {
              "value": "h5",
              "label": "t:common.headings.h5"
            },
            {
              "value": "h6",
              "label": "t:common.headings.h6"
            }
          ],
          "default": "h2"
        },
        {
          "type": "select",
          "id": "price_color",
          "label": "t:common.labels.price.color",
          "options": [
            {
              "value": "text-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "text-neutral-600",
              "label": "t:common.colors.neutral"
            },
            {
              "value": "text-white",
              "label": "t:common.colors.white"
            },
            {
              "value": "text-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "text-accent",
              "label": "t:common.colors.accent"
            },
            {
              "value": "text-secondary",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "text-tertiary",
              "label": "t:common.colors.tertiary"
            }
          ],
          "default": "text-primary"
        },
        {
          "type": "select",
          "id": "price_size",
          "label": "t:common.labels.price.size",
          "options": [
            {
              "value": "text-h2 md:text-h1",
              "label": "t:common.sizes.large"
            },
            {
              "value": "text-h3 md:text-h2",
              "label": "t:common.sizes.medium"
            },
            {
              "value": "text-h4 md:text-h3",
              "label": "t:common.sizes.small"
            }
          ],
          "default": "text-h3 md:text-h2"
        },
        {
          "type": "radio",
          "id": "show_installment",
          "label": "t:sections.main_product_detail_classic.settings.show_installment",
          "options": [
            {
              "value": "true",
              "label": "t:common.options.yes"
            },
            {
              "value": "false",
              "label": "t:common.options.no"
            }
          ],
          "default": "true"
        },
        {
          "type": "header",
          "content": "t:common.headers.discount"
        },
        {
          "type": "radio",
          "id": "show_discount",
          "label": "t:sections.main_product_detail_classic.settings.show_discount",
          "options": [
            {
              "value": "true",
              "label": "t:common.options.yes"
            },
            {
              "value": "false",
              "label": "t:common.options.no"
            }
          ],
          "default": "true"
        },
        {
          "type": "select",
          "id": "discount_color",
          "label": "t:common.labels.discount.color",
          "options": [
            {
              "value": "bg-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "bg-neutral-600",
              "label": "t:common.colors.neutral"
            },
            {
              "value": "bg-white",
              "label": "t:common.colors.white"
            },
            {
              "value": "bg-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "bg-accent",
              "label": "t:common.colors.accent"
            },
            {
              "value": "bg-secondary",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "bg-tertiary",
              "label": "t:common.colors.tertiary"
            }
          ],
          "default": "bg-primary"
        },
        {
          "type": "select",
          "id": "discount_text_color",
          "label": "t:common.labels.text.color",
          "options": [
            {
              "value": "text-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "text-neutral-600",
              "label": "t:common.colors.neutral"
            },
            {
              "value": "text-white",
              "label": "t:common.colors.white"
            },
            {
              "value": "text-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "text-accent",
              "label": "t:common.colors.accent"
            }
          ],
          "default": "text-white"
        },
        {
          "type": "select",
          "id": "discount_size",
          "label": "t:common.labels.discount.size",
          "options": [
            {
              "value": "text-body-lg",
              "label": "t:common.sizes.large"
            },
            {
              "value": "text-body-base",
              "label": "t:common.sizes.medium"
            },
            {
              "value": "text-body-sm",
              "label": "t:common.sizes.small"
            }
          ],
          "default": "text-body-sm"
        }
      ]
    },
    {
      "type": "quantity",
      "name": "t:sections.main_product_detail_classic.blocks.quantity.name",
      "limit": 1,
      "settings": []
    },
    {
      "type": "variant_selector",
      "name": "t:sections.main_product_detail_classic.blocks.variant_selector.name",
      "limit": 1,
      "settings": []
    },
    {
      "type": "tags",
      "name": "t:sections.main_product_detail_classic.blocks.tags.name",
      "settings": [
        {
          "type": "select",
          "id": "tags_style",
          "label": "t:common.labels.tags.style",
          "options": [
            {
              "value": "button border-none",
              "label": "t:common.styles.button.solid"
            },
            {
              "value": "button button-outline",
              "label": "t:common.styles.button.outline"
            }
          ],
          "default": "button border-none"
        },
        {
          "type": "richtext",
          "id": "tag_text",
          "label": "t:common.labels.text.write",
          "default": "<p>Baixou o preço</p>"
        }
      ]
    },
    {
      "type": "observation",
      "name": "t:sections.main_product_detail_classic.blocks.observation.name",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:common.labels.image.select"
        },
        {
          "type": "header",
          "content": "t:common.headers.text"
        },
        {
          "type": "richtext",
          "id": "observation_text",
          "label": "t:common.labels.text.write",
          "default": "<p>Observação número um</p>"
        }
      ]
    },
    {
      "type": "button",
      "name": "t:common.headers.button",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "button_color",
          "label": "t:common.labels.button.color",
          "options": [
            {
              "value": "button-primary",
              "label": "t:common.colors.primary"
            },
            {
              "value": "button-accent",
              "label": "t:common.colors.accent"
            },
            {
              "value": "button-secondary",
              "label": "t:common.colors.secondary"
            },
            {
              "value": "button-tertiary",
              "label": "t:common.colors.tertiary"
            },
            {
              "value": "button-black",
              "label": "t:common.colors.black"
            },
            {
              "value": "button-white",
              "label": "t:common.colors.white"
            }
          ],
          "default": "button-primary"
        },
        {
          "type": "radio",
          "id": "button_width",
          "label": "t:common.labels.button.size",
          "options": [
            {
              "value": "py-2",
              "label": "t:common.sizes.medium"
            },
            {
              "value": "py-1",
              "label": "t:common.sizes.small"
            }
          ],
          "default": "py-2"
        },
        {
          "type": "select",
          "id": "button_style",
          "label": "t:common.labels.button.style",
          "options": [
            {
              "value": "button",
              "label": "t:common.styles.button.solid"
            },
            {
              "value": "button button-outline",
              "label": "t:common.styles.button.outline"
            },
            {
              "value": "button button-ghost",
              "label": "t:common.styles.button.ghost"
            }
          ],
          "default": "button"
        },
        {
          "type": "radio",
          "id": "button_function",
          "label": "t:common.labels.button.function",
          "options": [
            {
              "value": "buy_now",
              "label": "t:sections.main_product_detail_classic.settings.buy_now"
            },
            {
              "value": "add_to_cart",
              "label": "t:sections.main_product_detail_classic.settings.add_to_cart"
            }
          ],
          "default": "buy_now"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "t:common.labels.button.write",
          "default": "Botão"
        }
      ]
    },
    {
      "type": "accordion",
      "name": "t:common.headers.accordion",
      "settings": [
        {
          "type": "text",
          "id": "accordion_title",
          "label": "t:common.labels.title.write",
          "default": "Título do acordeão"
        },
        {
          "type": "richtext",
          "id": "accordion_text",
          "label": "t:common.labels.text.write",
          "default": "<p>Conteúdo do acordeão aqui</p>"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:common.labels.image.select"
        }
      ]
    },
    {
      "type": "stamp",
      "name": "t:common.blocks.stamp",
      "settings": [
        {
          "type": "header",
          "content": "t:common.headers.image"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:common.labels.image.select"
        },
        {
          "type": "header",
          "content": "t:common.headers.text"
        },
        {
          "id": "text",
          "type": "text",
          "label": "t:common.labels.text.write",
          "default": "Texto do selo"
        }
      ]
    }
  ]
}
{% endschema %}
