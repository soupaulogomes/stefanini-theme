{% liquid
  assign product_featured_image = product.featured_image | image_url
  assign discountPercentage = product.selected_or_first_available_variant.compare_at_price | minus: product.selected_or_first_available_variant.price | times: 100.0 | divided_by: product.selected_or_first_available_variant.compare_at_price | round
  if product_featured_image == blank
    if settings.product_placeholder != blank
      assign product_featured_image = settings.product_placeholder | image_url
    endif
  endif

  assign loading = 'eager'
  assign fetchpriority = 'auto'
  if section.index == 1
    assign fetchpriority = 'high'
  elsif section.index > 2
    assign loading = 'lazy'
  endif

  assign media_class = 'product-media media h-full w-full object-cover object-center '
  if card
    assign media_class = media_class | append: ' rounded-none '
  endif
  if section.settings.image_ratio != blank
    assign aspect_ratio = section.settings.image_ratio
  elsif settings.product_card_image_ratio != blank
    assign aspect_ratio = settings.product_card_image_ratio
  endif
  assign media_class = media_class | append: aspect_ratio
%}
<div
  x-data="
    {
      shown: false,
      loading: false,
      openModal: false,
      variant: '{{ product.selected_or_first_available_variant.id }}',
      quantity: 1,
      currentVariant: {{ product.selected_or_first_available_variant | json | escape }},
      selectedOptions: {{ product.selected_or_first_available_variant.options | json | escape }},
      selectedOptionsModal: {{ product.selected_or_first_available_variant.options | json | escape }},
      productVariants: {{ product.variants | json | escape }},
      productHandle: '{{ product.handle }}',
      async updateProductCard(productId = '') {
        this.loading = true

        if (this.productHandle != '' && productId != '') {
          await fetch(`/products/${this.productHandle}?view=product-card`)
          .then(response => {
            if (response.status !== 200) {
              throw new Error(response.statusText)
            } else {
              return response.text()
            }
          })
          .then(cartData => {
            const html = new DOMParser().parseFromString(cartData, 'text/html')
            let htmlString = html.getElementsByClassName(`product-card-${productId}`)[0].outerHTML

            $refs.productCard.outerHTML = htmlString
            this.loading = false
          })
          .catch((error) => {
            console.error(error)
            this.loading = false
          })
        }else {
          await fetch(`/products/{{ product.handle }}?view=product-card&variant=${$data.currentVariant.id}`)
          .then(response => {
            if (response.status !== 200) {
              throw new Error(response.statusText)
            } else {
              return response.text()
            }
          })
          .then(cartData => {
            const html = new DOMParser().parseFromString(cartData, 'text/html')
            let htmlString = html.getElementsByClassName(`product-card-{{ product.id }}`)[0].outerHTML
            $refs.productCard.outerHTML = htmlString
            this.loading = false
          })
          .catch((error) => {
            console.error(error)
            this.loading = false
          })
        }

      },
      async updateModalProduct() {
        this.loading = true

        await fetch(`/products/${this.productHandle}?view=product-card-modal&variant=${$data.currentVariant.id}`)
        .then(response => {
          if (response.status !== 200) {
            throw new Error(response.statusText)
          } else {
            return response.text()
          }
        })
        .then(cartData => {
          const html = new DOMParser().parseFromString(cartData, 'text/html')
          let htmlString = html.getElementById(`product-modal-{{ product.id }}`).innerHTML
          $refs.modal.innerHTML = htmlString
          this.loading = false
        })
        .catch((error) => {
          console.error(error)
          this.loading = false
        })

      },
      async updateVariant() {
        $data.currentVariant = $data.productVariants.find((variant) => {
            return !variant.options.map((option, index) => {
              return $data.selectedOptions[index] === option
            }).includes(false)
          })

        this.updateProductCard();
      },
      async updateModalVariant() {
        $data.currentVariant = $data.productVariants.find((variant) => {
            return !variant.options.map((option, index) => {
              return $data.selectedOptionsModal[index] === option
            }).includes(false)
          })

          this.updateModalProduct();
      },
      handleAdd(type = 'add') {
        this.loading = true

        const items = [{ id: this.currentVariant.id, quantity: this.quantity }]

        $store.cart.addItems(items, { showCart: (type == 'add' ? true : false) })
        .then(response => {
          this.loading = false

          {% if settings.cart_type != 'side' %}
            $dispatch('show-notification', { type: 'success', title: '{{ 'common.notification.cart' | t }}', description: '{{ 'common.notification.add_success' | t }}' })
          {% endif %}

          $dispatch('cart-change')

          $store.cart.fetchItems()

          if (type == 'buy') {
            window.location.href = '/checkout'
          }

          Log('Add to Cart:', response)
        })
      }
    }
  "
  id="product-card-{{ product.id }}"
    x-init="$watch('selectedOptions', () => updateVariant()); $watch('selectedOptionsModal', () => updateModalVariant());"
  x-ref="productCard"
  x-intersect:enter.half="shown = true"
  :class="{ 'opacity-100': shown , 'opacity-0': !shown }"
  class="product-card-{{ product.id }} product-card transition-all duration-500 {% if card %}card{% endif %} {{ settings.card_bg_color }} relative flex h-full flex-col overflow-hidden"
>
  <div 
  {% if section.settings.button_action == 'go-to-product' %}
    @click="window.location.href='{{ product.selected_or_first_available_variant.url | default: product.url }}'"
    :class="
      {
        'cursor-pointer': true
      }
    "
  {% endif %} class="relative {{ aspect_ratio }} image w-full">
    <a
      aria-label="{{ 'common.aria_label.product_image' | t }}"
      href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
    >
      {% assign product_featured_image = product.selected_or_first_available_variant.featured_media | default: product.featured_media %}
      {% assign product_alt = product.featured_image.alt | default: product.title | escape %}
      {% if product_featured_image != blank %}
        {% case product_featured_image.media_type %}
          {% when 'external_video' %}
            {{ product_featured_image | external_video_tag: class: media_class }}
          {% when 'video' %}
            {{ product_featured_image | video_tag: autoplay: true, muted: true, loop: true, class: media_class }}
          {% when 'model' %}
            {{ product_featured_image | model_viewer_tag: class: media_class }}
          {% when 'image' %}
            {{
              product_featured_image
              | image_url: width: 600
              | image_tag: loading: loading, fetchpriority: fetchpriority, alt: product_alt, class: media_class
            }}
        {% endcase %}
      {% else %}
        <div class="{{ aspect_ratio }} h-full w-full">
          {% render 'product-placeholder', media_class: media_class %}
        </div>
      {% endif %}
    </a>
    <div class="absolute left-2 top-2 flex flex-col gap-1 border-none lining-nums tabular-nums">
      {% if product.metafields.luca.tag1 != blank %}
        <span class="tag w-fit shrink-0 border-none px-2 py-1 text-xs {{ settings.tags_background_color }} {{ settings.tags_text_color }}">
          {{- product.metafields.luca.tag1 -}}
        </span>
      {% endif %}
      {% if product.metafields.luca.tag2 != blank %}
        <span class="tag w-fit shrink-0 border-none px-2 py-1 text-xs {{ settings.tags_background_color }} {{ settings.tags_text_color }}">
          {{- product.metafields.luca.tag2 -}}
        </span>
      {% endif %}
      {% if settings.show_discount == 'true' and discountPercentage > 0 %}
        <span class="tag w-fit shrink-0 border-none px-2 py-1 text-xs {{ settings.discount_background_color }} {{ settings.discount_text_color }}">
          {{ discountPercentage }}
          {{ 'snippets.product_card.off' | t }}
        </span>
      {% endif %}
    </div>
  </div>
  <div class="flex flex-1 flex-col justify-between gap-6 {% if card %}p-4{% else %}px-2 py-4{% endif %}">
    <div class="flex flex-col gap-2">
      <a
        aria-label="{{ product.title }}"
        href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
      >
        <span class="product-title line-clamp-3 {{ settings.title_color }} {{ settings.title_size }}">
          {{- product.title -}}
        </span>
      </a>
      <div class="flex flex-col-reverse flex-wrap gap-1">
        <p class="price font-semibold {{ settings.price_color }} {{ settings.price_size }}">
          {{ product.selected_or_first_available_variant.price | money }}
        </p>
        {% if product.selected_or_first_available_variant.compare_at_price
            > product.selected_or_first_available_variant.price
        %}
          <p class="compare-at-price line-through {{ settings.text_color }} {{ settings.text_size }}">
            {{ product.selected_or_first_available_variant.compare_at_price | money }}
          </p>
        {% endif %}
      </div>
      {% assign installments = settings.installments_number %}
      {% if settings.show_installment == 'true' and installments > 1 %}
        {% liquid
          assign price = product.selected_or_first_available_variant.price | default: 0

          assign installments_max = price | divided_by: settings.installments_min_price | divided_by: 100 | round: 2 | at_most: settings.installments_number
          assign installment_fees = price | times: settings.installments_percentage_fees | divided_by: 100
          assign installment_price = price | plus: installment_fees | divided_by: installments_max

          assign value = installment_price | money
        %}
        {%- if installments_max > 1 -%}
          <p class="installment {{ settings.text_color }} {{ settings.text_size }}">
            {{ 'snippets.product_card.installments_value' | t: installments: installments_max, value: value }}
          </p>
        {%- endif -%}
      {% endif %}
      <div class="flex flex-shrink-0 items-center gap-2">
        {% if settings.product_type == 'metaobject' and product.metafields.luca.product_group != blank %}
          {% assign meta = product.metafields.luca.product_group.value %}
          {% for prod in meta.products.value %}
            {% if forloop.index0 < 2 %}
              {% liquid
                assign color = 'bg-colors-' | append: prod.metafields.luca.color.value.name | handle
                assign products_count = forloop.length | minus: 2
              %}
              <button
                aria-label="{{ 'common.aria_label.product_image' | t }}"
                @click="productHandle = '{{ prod.handle }}';  updateProductCard('{{ prod.id }}')"
                class="selector h-6 w-6 cursor-pointer overflow-hidden rounded-full {{ color }} border {% if prod.url == product.url %}border-2 border-primary{% endif %}"
              >
                {% if prod.metafields.luca.color.value == blank %}
                  {{-
                    prod.featured_image
                    | image_url: width: 100
                    | image_tag: loading: loading, fetchpriority: fetchpriority, class: 'h-8 w-8 object-cover'
                  -}}
                {% endif %}
              </button>
            {% endif %}
          {% endfor %}
          {% if products_count > 0 %}
            <a
              aria-label="+ {{ products_count }}"
              class="p-1 {{ settings.text_color }} {{ settings.text_size }}"
              href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
            >
              + {{ products_count -}}
            </a>
          {% endif %}
        {% endif %}
        {%- unless product.has_only_default_variant -%}
          {% if settings.show_color_selector == 'true' %}
            {%- for option in product.options_with_values -%}
              {% assign index = forloop.index0 %}
              <fieldset
                class="flex flex-col gap-2"
                id="ProductSelect-option-{{ forloop.index0 }}-{{ section.id }}"
                name="{{ option.name | handleize }}"
              >
                <div class="flex gap-2">
                  {%- for value in option.values -%}
                    {% liquid
                      assign option_variants = product.variants
                      for option_index in (1..index)
                        assign option_index0 = option_index | minus: 1
                        assign option_where = 'option' | append: option_index
                        assign option_variants = option_variants | where: option_where, product.selected_variant.options[option_index0]
                      endfor
                      assign index1 = index | plus: 1
                      assign option_where = 'option' | append: index1
                      assign available_option_variants_size = option_variants | where: option_where, value | where: 'available' | size
                    %}

                    {% if option.name == 'Cor' or option.name == 'Color' %}
                      {% liquid
                        assign color_count = forloop.length | minus: 4
                        assign color = value | handle
                      %}
                      {% if forloop.index0 < 4 %}
                        <input
                          type="radio"
                          {% if option.selected_value == value %}
                            checked="checked"
                          {% endif %}
                          {% if available_option_variants_size <= 0 %}
                            disabled
                          {% endif %}
                          value="{{ value | escape }}"
                          data-index="option{{ forloop.index }}"
                          name="{{ option.name | handleize }}"
                          id="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                          class="hidden"
                          x-model="selectedOptions[{{ index }}]"
                        >
                        <label
                          class="selector relative flex h-6 w-6 cursor-pointer items-center justify-center rounded-full {% if option.selected_value == value %}border-2 border-black{% else %}border border-gray-300{% endif %} {% if available_option_variants_size <= 0 %}cursor-not-allowed{% endif %}"
                          for="ProductSelect-option-{{ option.name | handleize }}-{{ value | escape }}-{{ product.selected_or_first_available_variant.id }}-{{ section.id }}"
                        >
                          <span class="sr-only">
                            {{ option.name | escape }}
                          </span>
                          <div
                            class="h-4 w-4 rounded-full {% if available_option_variants_size <= 0 %}bg-gray-400{% else %}{% if color != blank %}bg-colors-{{ color }}{% endif %}{% endif %}"
                          ></div>
                        </label>
                      {% endif %}
                    {% endif %}
                  {%- endfor -%}
                </div>
              </fieldset>
            {%- endfor -%}
            {% if color_count > 0 %}
              <a
                aria-label="+ {{ color_count }}"
                class="whitespace-nowrap {{ settings.text_color }} {{ settings.text_size }}"
                href="{{ product.selected_or_first_available_variant.url | default: product.url }}"
              >
                + {{ color_count -}}
              </a>
            {% endif %}
          {% endif %}
        {%- endunless -%}
      </div>
    </div>

    {% if settings.buy_button_label != blank %}
      {% liquid
        assign button_class = ''

        if product.available
          assign button_class = 'button ' | append: settings.buy_button_color | append: ' ' | append: settings.buy_button_style | append: ' ' | append: settings.buy_button_size
        else
          assign button_class = 'button button-gray-400 bg-gray-300 text-gray-400 ' | append: settings.buy_button_size | append: ' ' | append: settings.buy_button_style
        endif
      %}
      <button
        {% if product.available %}
          {% if section.settings.button_action != 'go-to-product' %}
            @click="handleAdd()"
          {% else %}
            @click="window.location.href='{{ product.selected_or_first_available_variant.url | default: product.url }}'"
          {% endif %}
          :disabled="loading"
        {% else %}
          disabled
        {% endif %}
        class="w-full {{ button_class }}"
      >
        {% render 'loading-spinner' %}
        <div class="line-clamp-1" x-show="!loading">
          {% if product.available %}
            {% assign text_buy_button = 'snippets.product_card.buy' | t %}
            {{ section.settings.product_button_text | default: settings.buy_button_label | default: text_buy_button }}
          {% else %}
            {{ 'common.sold_out' | t }}
          {% endif %}
          <span class="sr-only">{{ product.title }}</span>
        </div>
      </button>
    {% endif %}
  </div>
</div>
